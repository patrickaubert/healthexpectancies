sheet = year,
range = cases
)
colkeep <- colkeep[colkeep<=ncol(tab)]
tab <- tab[,colkeep]
names(tab) <- colnames[1:ncol(tab)]
tab <- tab %>%
filter(!is.na(age)) %>%
pivot_longer(cols=-c("age"),names_to="sex",values_to="qx") %>%
mutate(qx = qx/100000,
sex = as.factor(sex),
age = as.numeric(age),
year = as.numeric(year)-1)
lionglets[[an]] <- tab
}
return( do.call("rbind", lionglets) )
}
FRInseeMortalityrates <- rbind(
mr_fr("data-raw/fe_t68.xlsx") %>% mutate(geo = "france"),
mr_fr("data-raw/fm_t68.xlsx") %>% mutate(geo = "metropolitan france")
)
unique(FrInseeMortalityrates$age)
unique(FRInseeMortalityrates$age)
FRInseeMortalityrates <- rbind(
mr_fr("data-raw/fe_t68.xlsx") %>% mutate(geo = "france"),
mr_fr("data-raw/fm_t68.xlsx") %>% mutate(geo = "metropolitan france")
)
usethis::use_data(FRInseeMortalityForecast2016,
FRInseePopulationForecast2016,
FRInseeMortalityrates,
FRInseePopulation,
FRDreesVQSsurvey2014,
FRDreesAPA2017,
FRDreesAPA,
sullivan,
description_sullivan,
overwrite = T)
library(usethis)
library(pkgdown)
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
build_site()
library(pkgdown)
build_site()
build_site()
build_site()
build_site()
build_site()
library(pkgdown)
build_site()
build_site()
library(readxl)
library(tidyverse)
mr_fr <- function(path) {
onglets <- excel_sheets(path)
lionglets <- list()
for (an in 1:NROW(onglets)) {
year <- onglets[an]
cases <- case_when(year>=2012 ~ "A4:J109",
year>=2011 ~ "A12:J119",
year>=1990 ~ "A12:J114",
year>=1977 ~ "A12:G114")
colkeep <- c(1,3,6,9)
colnames <- c("age","male","female","all")
tab <- read_excel(
path,
sheet = year,
range = cases
)
colkeep <- colkeep[colkeep<=ncol(tab)]
tab <- tab[,colkeep]
names(tab) <- colnames[1:ncol(tab)]
tab <- tab %>%
filter(!is.na(age)) %>%
pivot_longer(cols=-c("age"),names_to="sex",values_to="qx") %>%
mutate(qx = qx/100000,
sex = as.factor(sex),
age = as.numeric(age),
year = as.numeric(year)-1)
lionglets[[an]] <- tab
}
return( do.call("rbind", lionglets) )
}
FRInseeMortalityrates <- rbind(
mr_fr("data-raw/fe_t68.xlsx") %>% mutate(geo = "france"),
mr_fr("data-raw/fm_t68.xlsx") %>% mutate(geo = "metropolitan france")
)
View(FRInseeMortalityrates)
usethis::use_data(FRInseeMortalityForecast2016,
FRInseePopulationForecast2016,
FRInseeMortalityrates,
FRInseePopulation,
FRDreesVQSsurvey2014,
FRDreesAPA2017,
FRDreesAPA,
sullivan,
description_sullivan,
overwrite = T)
library(devtools)
load_all()
mr_fr <- function(path) {
onglets <- excel_sheets(path)
lionglets <- list()
for (an in 1:NROW(onglets)) {
year <- onglets[an]
cases <- case_when(year>=2012 ~ "A4:J109",
year>=2011 ~ "A12:J119",
year>=1990 ~ "A12:J114",
year>=1977 ~ "A12:G114")
colkeep <- c(1,3,6,9)
colnames <- c("age","male","female","all")
tab <- read_excel(
path,
sheet = year,
range = cases
)
colkeep <- colkeep[colkeep<=ncol(tab)]
tab <- tab[,colkeep]
names(tab) <- colnames[1:ncol(tab)]
tab <- tab %>%
filter(!is.na(age)) %>%
pivot_longer(cols=-c("age"),names_to="sex",values_to="qx") %>%
mutate(qx = qx/100000,
sex = as.factor(sex),
age = as.numeric(age),
year = as.numeric(year)-1)
lionglets[[an]] <- tab
}
return( do.call("rbind", lionglets) )
}
FRInseeMortalityrates <- rbind(
mr_fr("data-raw/fe_t68.xlsx") %>% mutate(geo = "france"),
mr_fr("data-raw/fm_t68.xlsx") %>% mutate(geo = "metropolitan france")
)
usethis::use_data(FRInseeMortalityForecast2016,
FRInseePopulationForecast2016,
FRInseeMortalityrates,
FRInseePopulation,
FRDreesVQSsurvey2014,
FRDreesAPA2017,
FRDreesAPA,
sullivan,
description_sullivan,
overwrite = T)
library(readxl)
library(tidyverse)
library(devtools)
devtools::load_all()
mr_fr <- function(path) {
onglets <- excel_sheets(path)
lionglets <- list()
for (an in 1:NROW(onglets)) {
year <- onglets[an]
cases <- case_when(year>=2012 ~ "A4:J109",
year>=2011 ~ "A12:J119",
year>=1990 ~ "A12:J114",
year>=1977 ~ "A12:G114")
colkeep <- c(1,3,6,9)
colnames <- c("age","male","female","all")
tab <- read_excel(
path,
sheet = year,
range = cases
)
colkeep <- colkeep[colkeep<=ncol(tab)]
tab <- tab[,colkeep]
names(tab) <- colnames[1:ncol(tab)]
tab <- tab %>%
filter(!is.na(age)) %>%
pivot_longer(cols=-c("age"),names_to="sex",values_to="qx") %>%
mutate(qx = qx/100000,
sex = as.factor(sex),
age = as.numeric(age),
year = as.numeric(year)-1)
lionglets[[an]] <- tab
}
return( do.call("rbind", lionglets) )
}
FRInseeMortalityrates <- rbind(
mr_fr("data-raw/fe_t68.xlsx") %>% mutate(geo = "france"),
mr_fr("data-raw/fm_t68.xlsx") %>% mutate(geo = "metropolitan france")
)
View(FRInseeMortalityrates)
View(FRInseeMortalityrates)
FRInseePopulation <- bind_rows(
read_csv2("data-raw/donnees_pyramide_act") %>% mutate(geo="france",status="observed"),
read_csv2("data-raw/donnees_pyramide_proj") %>% mutate(geo="france",status="forecasted"),
read_csv2("data-raw/donnees_pyramide_act_fm") %>% mutate(geo="metropolitan france",status="observed"),
read_csv2("data-raw/donnees_pyramide_proj_fm") %>% mutate(geo="metropolitan france",status="forecasted")
)
FRInseePopulation <- bind_rows(
read_csv2("data-raw/donnees_pyramide_act.csv") %>% mutate(geo="france",status="observed"),
read_csv2("data-raw/donnees_pyramide_proj.csv") %>% mutate(geo="france",status="forecasted"),
read_csv2("data-raw/donnees_pyramide_act_fm.csv") %>% mutate(geo="metropolitan france",status="observed"),
read_csv2("data-raw/donnees_pyramide_proj_fm.csv") %>% mutate(geo="metropolitan france",status="forecasted")
)
FRInseePopulation <- bind_rows(
read_csv2("data-raw/donnees_pyramide_act.csv") %>% mutate(geo="france",status="observed"),
read_csv2("data-raw/donnees_pyramide_proj.csv") %>% mutate(geo="france",status="forecasted"),
read_csv2("data-raw/donnees_pyramide_act_fm.csv") %>% mutate(geo="metropolitan france",status="observed"),
read_csv2("data-raw/donnees_pyramide_proj_fm.csv") %>% mutate(geo="metropolitan france",status="forecasted") %>%
mutate(SEXE = recode(as.character(SEXE), "1"="M", "2"="F"))
)
View(FRInseePopulation)
View(FRInseeMortalityrates)
View(FRInseePopulation)
FRInseePopulation <- bind_rows(
read_csv2("data-raw/donnees_pyramide_act.csv") %>% mutate(geo="france"),
read_csv2("data-raw/donnees_pyramide_act_fm.csv") %>% mutate(geo="metropolitan france")  )  %>%
rename(year = ANNEE,
sex = SEXE,
popx = POP,
age0101 = AGE) %>%
mutate(year = as.numeric(year),
age0101 = as.numeric(age0101),
sex = as.factor(sex),
geo = as.factor(geo))
View(FRInseePopulation)
View(FRInseePopulation)
min(FRInseePopulation$year)
usethis::use_data(FRInseeMortalityForecast2016,
FRInseePopulationForecast2016,
FRInseeMortalityrates,
FRInseePopulation,
FRDreesVQSsurvey2014,
FRDreesAPA2017,
FRDreesAPA,
sullivan,
description_sullivan,
overwrite = T)
build()
check()
build()
load_all()
runExample()
library(pkgdown)
build_site()
library(devtools)
load_all()
description_sullivan
description_sullivan
load_all()
description_sullivan
library(readxl)
library(tidyverse)
sullivan <- read_excel("data-raw/sullivan_manual_jun2007.en.xls",
sheet = "Ex 1",
range = "A5:O91")
names(sullivan)[1] <- "year"
names(sullivan)[2] <- "age"
names(sullivan)[12] <- "DFLx"
names(sullivan)[13] <- "DFTx"
names(sullivan)[15] <- "pctDFLEx"
# names(sullivan)
sullivan$age[nrow(sullivan)] <- 85
sullivan <- sullivan %>%
mutate(year = as.numeric(year),
#sex = as.factor(sex),
age = as.numeric(age))
names_sullivan <- read_excel("data-raw/sullivan_manual_jun2007.en.xls",
sheet = "Ex 1",
range = "A4:O4")
description_sullivan <- data.frame(
heading = c(
names(sullivan),
"DLx",
"DLEx",
"pctDLEx",
"MeanDAx",
"MedianDAx",
"ModalDAx"
),
description = c(
names(names_sullivan),
"person years lived with disability",
"with disability life expectancy",
"proportion of life spent with disability",
"average conjonctural age of person years lived with disability",
"median conjonctural age of person years lived with disability",
"modal conjonctural age of person years lived with disability"
)
)
View(description_sullivan)
usethis::use_data(FRInseeMortalityForecast2016,
FRInseePopulationForecast2016,
FRInseeMortalityrates,
FRInseePopulation,
FRDreesVQSsurvey2014,
FRDreesAPA2017,
FRDreesAPA,
sullivan,
description_sullivan,
overwrite = T)
tab <- sullivan[,c("year","age","mx","qx","pix")]
View(tab)
# remove columns with missing values
tab <- tab[,colSums(is.na(tab))==0]
# if 'sex' and/or 'year' and/or 'categ' are in the input dataset, calculations is made for each values of these 2 variables
# NB: 'categ' is an undefinite category variable (to be defined by user)
if ("sex" %in% names(tab)) {
classsex <- unique(tab$sex)
#tab <- tab %>% mutate(sex = as.factor(sex))
tab$sex <- as.factor(tab$sex)
if (NROW(classsex)>1)  {
bysex <- function(s){ CompleteDFLEtable(tab[tab$sex == s,]) }
return( do.call(rbind,lapply(classsex,bysex)) )
}
}
if ("categ" %in% names(tab)) {
classcateg <- unique(tab$categ)
#tab <- tab %>% mutate(categ = as.factor(categ))
tab$categ <- as.factor(tab$categ)
if (NROW(classcateg)>1)  {
bycateg <- function(cat){ CompleteDFLEtable(tab[tab$categ == cat,]) }
return( do.call(rbind,lapply(classcateg,bycateg)) )
}
}
if ("year" %in% names(tab)) {
classyear <- unique(tab$year)
#tab <- tab %>% mutate(year = as.numeric(year))
tab$year <- as.numeric(tab$year)
if (NROW(classyear)>1)  {
byyear <- function(y){ CompleteDFLEtable(tab[tab$year == y,]) }
return( do.call(rbind,lapply(classyear,byyear)) )
}
}
# creates no variable if age is missing in the input dataset
# NB: in the sullivan manuel, 'x' means 'age'
if (!("age" %in% names(tab)) & ("x" %in% names(tab))) { tab$age <- tab$x }
if (!("age" %in% names(tab))) { return(tab) }
#tab <- tab %>% mutate(age = as.numeric(age))
tab$age <- as.numeric(tab$age)
tab <- tab[order(tab$age),]
# adding agewidth : should be equal to 1 if all ages are in the input dataset
if (("age" %in% names(tab)) & !("agewidth" %in% names(tab))) {
tab$agewidth <- c( tail(tab$age,-1), (tail(tab$age,1)+1)) - tab$age
}
# adding central death rate (mx), from Mid-year population (Px) and	No. deaths (Dx)
if (("Px" %in% names(tab)) & ("Dx" %in% names(tab)) & !("mx" %in% names(tab))) {
tab$mx <- tab$Dx / tab$Px
}
# =================== mx <-> qx ====================
# adding conditional probability of death (qx), from central death rate (mx)
if (("mx" %in% names(tab)) & !("qx" %in% names(tab))) {
tab$qx <- tab$mx * tab$agewidth / (1 + 0.5 * tab$agewidth * tab$mx)
}
# --- alternative : adding central death rate (mx), from conditional probability of death (qx)
if (("qx" %in% names(tab)) & !("mx" %in% names(tab))) {
tab$mx <- tab$qx / tab$agewidth / (1 - 0.5 * tab$qx)
}
# =================== qx -> lx ====================
# adding number of survivors to age x, from conditional probability of death
if (("qx" %in% names(tab)) & !("lx" %in% names(tab))) {
tab$lx <- 100000 * cumprod(c(1, 1 - utils::head(tab$qx,-1) ))
}
# =================== lx -> Lx ====================
# adding person years lived at age x, from number of survivors to age x
if (("lx" %in% names(tab)) & !("Lx" %in% names(tab))) {
w1 <- c( 0.2, rep(0.5, nrow(tab)-1) )
tab$Lx <- ( w1 * tab$lx +
(1 - w1) * c( utils::tail(tab$lx,-1), 0) ) * tab$agewidth
tab$Lx[nrow(tab)] <- tab$lx[nrow(tab)] / tab$mx[nrow(tab)]
}
# =================== Lx -> Tx ====================
# adding total number of years lived  from x, from person years lived at age x
if (("Lx" %in% names(tab)) & !("Tx" %in% names(tab))) {
tab$Tx <- rev( cumsum( rev(tab$Lx) ) )
}
# =================== lx, Tx -> ex ====================
# adding total life expectancy, from total number of years lived and numbers surviving to age x
if (("lx" %in% names(tab)) & ("Tx" %in% names(tab)) & !("ex" %in% names(tab))) {
tab$ex <- tab$Tx / tab$lx
}
# =================== Lx, pix -> DFLx, DLx ====================
# adding person-years lived without disability (DFLx), from person years lived at age x (Lx) and proportion with disability (pix)
if (("Lx" %in% names(tab)) & ("pix" %in% names(tab)) & !("DFLx" %in% names(tab))) {
tab$DFLx <- tab$Lx * (1 - tab$pix)
}
# adding person-years lived with disability (DLx), from person years lived at age x (Lx) and proportion with disability (pix)
if (("Lx" %in% names(tab)) & ("pix" %in% names(tab)) & !("DLx" %in% names(tab))) {
tab$DLx <- tab$Lx * tab$pix
}
# =================== DFLx -> DFTx ====================
# adding total years lived without disability from age x (DFTx), from person years lived without disability (DFLx)
if (("DFLx" %in% names(tab)) & !("DFTx" %in% names(tab))) {
tab$DFTx <- rev( cumsum( rev(tab$DFLx) ) )
}
# =================== lx, DFTx -> DFLEx ====================
# adding disability-free life expectancy (DFLEx), from total years lived without disability from age x (DFTx) and numbers surviving to age x
if (("lx" %in% names(tab)) & ("DFTx" %in% names(tab)) & !("DFLEx" %in% names(tab))) {
tab$DFLEx <- tab$DFTx / tab$lx
}
# =================== DFLEx <-> DLEx ====================
# adding in-disability life expectancy (DLEx), from life expectancy (ex) and disability-free life expectancy (DFLEx)
if (("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & !("DLEx" %in% names(tab))) {
tab$DLEx <- tab$ex - tab$DFLEx
}
# --- alternative : adding disability-free life expectancy (DFLEx), from life expectancy (ex) and in-disability life expectancy (DLEx)
if (!("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & ("DLEx" %in% names(tab))) {
tab$DFLEx <- tab$ex - tab$DLEx
}
# =================== DFLEx <-> pctDFLEx ====================
# adding proportion of life spent disability-free (pctDFLEx), from ratio of DFLE and LE at each age x
if (("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & !("pctDFLEx" %in% names(tab))) {
tab$pctDFLEx <- 100 * tab$DFLEx / tab$ex
}
# --- alternative : adding disability-free life expectancy (DFLEx), from proportion of life spent disability-free (pctDFLEx) and life-expectancy at each age x
if (!("DFLEx" %in% names(tab)) & ("ex" %in% names(tab)) & ("pctDFLEx" %in% names(tab))) {
tab$DFLEx <- tab$pctDFLEx/100 * tab$ex
if (!("DLEx" %in% names(tab))) { tab$DLEx <- tab$ex - tab$DFLEx }
}
# =================== DLEx <-> pctDLEx ====================
# adding proportion of life spent with disability (pctDLEx), from ratio of DLE and LE at each age x
if (("DLEx" %in% names(tab)) & ("ex" %in% names(tab)) & !("pctDLEx" %in% names(tab))) {
tab$pctDLEx <- 100 * tab$DLEx / tab$ex
}
# --- alternative : adding with disability life expectancy (DLEx), from proportion of life spent with disability (pctDLEx) and life-expectancy at each age x
if (!("DLEx" %in% names(tab)) & ("ex" %in% names(tab)) & ("pctDLEx" %in% names(tab))) {
tab$DLEx <- tab$pctDLEx/100 * tab$ex
}
View(tab)
if (("DLx" %in% names(tab)) & !("MeanDAx" %in% names(tab))) {
MeanDAx <- function(n) { sum( tab$DLx[n:nrow(tab)] * tab$age[n:nrow(tab)]) / sum(tab$DLx[n:nrow(tab)])}
tab$MeanDAx <- sapply( c(1:nrow(tab)) , MeanDAx)
}
View(tab)
if (("DLx" %in% names(tab)) & !("ModalDAx" %in% names(tab))) {
ModalDAx <- function(n) {
tab2 <- tab[,c(n:nrow(tab))]
return(min(tab2[tab2$DLx == max(tab2$DLx),"age"]))
}
tab$ModalDAx <- sapply( c(1:nrow(tab)) , ModalDAx)
}
ModalDax(1)
ModalDAx <- function(n) {
tab2 <- tab[,c(n:nrow(tab))]
return(min(tab2[tab2$DLx == max(tab2$DLx),"age"]))
}
ModalDax(1)
ModalDAx <- function(n) {
tab2 <- tab[,c(n:nrow(tab))]
return(min(tab2[tab2$DLx == max(tab2$DLx),"age"]))
}
ModalDAx(1)
tab2 <- tab[,c(n:nrow(tab))]
ModalDAx <- function(n) {
tab2 <- tab[c(n:nrow(tab)),]
return(min(tab2[tab2$DLx == max(tab2$DLx),"age"]))
}
ModalDAx(1)
ModalDAx(10)
ModalDAx(70)
if (("DLx" %in% names(tab)) & !("ModalDAx" %in% names(tab))) {
ModalDAx <- function(n) {
tab2 <- tab[c(n:nrow(tab)),]
return(min(tab2[tab2$DLx == max(tab2$DLx),"age"]))
}
tab$ModalDAx <- sapply( c(1:nrow(tab)) , ModalDAx)
}
View(tab)
if (("DLx" %in% names(tab)) & !("MedianDAx" %in% names(tab))) {
MedianDAx <- function(n) {
tab2 <- tab[c(n:nrow(tab)),]
tab2$cumDLx <- cumsum(tab2$DLx)
return(min(tab2[tab2$cumDLx >= sum(tab2$DLx)/2,"age"]))
}
tab$MedianDAx <- sapply( c(1:nrow(tab)) , MedianDAx)
}
View(tab)
load_all()
truc <- CompleteDFLEtable( sullivan[,c("year","age","mx","qx","pix")] )
View(truc)
truc <- CompleteDFLEtable( FRInseeMortalityForecast2016[FRInseeMortalityForecast2016$year %in% c(2013,2015,2020,2030),] )
View(truc)
runExample()
runExample()
runExample()
load_all()
runExample()
load_all()
runExample()
load_all()
runExample()
load_all()
runExample()
load_all()
runExample()
runExample()
load_all()
runExample()
load_all()
runExample()
load_all()
runExample()
load_all()
runExample()
load_all()
library(devtools)
load_all()
document()
test()
check()
install()
library(devtools)
document()
runExample()
library(pkgdown)
pkgdown::build_site()
runApp('inst/shiny-examples/projprevalence')
rsconnect::deployApp(appDir = "C:/Users/PA/Documents/R/Projets/healthexpectancies/inst/shiny-examples/projprevalence", server = "shinyapps.io")
